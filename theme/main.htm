<html>

<head>
    <link href="/assets/css/github-markdown.css" rel="stylesheet" type="text/css">
    <link href="/assets/css/styles.css" rel="stylesheet" type="text/css">
    <meta content="unsafe-url" name="referer">
    <link href="/assets/images/favicon.ico" rel="icon" />
    <script src="/assets/js/highlighter.js"></script>
</head>

<body class="markdown-body" id='body'>
    {{> nav}}
    {{> body}}
</body>

<script>
    function walkTheDOM(node, func) {
        func(node);
        node = node.firstChild;
        while (node) {
            walkTheDOM(node, func);
            node = node.nextSibling;
        }
    }

    String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.replace(new RegExp(search, 'g'), replacement);
    };
    window.onload = prop => {
        let hash = decodeURIComponent(window.location.hash);
        let hashes = hash.split("#")
        searchTerm = parseInt(hashes[1]);
        let searchWord = hashes[2];
        console.log(`searchWord=${searchWord}`);

        // searchTerm = searchTerm.replaceAll(/[0-9.]/, '.');
        console.log(searchTerm);
        let lines = document.body.innerHTML.split('\n');
        let cnt = 0;
        let pre = false;
        console.log(lines);
        lines = lines.map(line => {
            if (line.match(/<pre>/)) {
                pre = true;
                return line;
            }
            if (line.match(/<[/]pre>/)) {
                pre = false;
                return "<pre>" + line
            };
            if (pre) {
                return "<pre>" + line
            };
            return line;
        });
        let line = "";
        let i = 0;
        for (i = 0; i < lines.length; i++) {
            line = lines[i];
            if (line.match(/<h.|<p>|<table>/)) {
                cnt += 2;
                if (cnt >= searchTerm)
                    break;

            } else if (line.match(/<pre>|<br>|<ol>|<ul>|<li>|<tr>/)) {
                cnt++
                if (cnt >= searchTerm)
                    break;

            }
        }
        console.log(`${i}: ${cnt}: ${line}`);
        var wrapper = document.createElement('div');
        wrapper.innerHTML = line;
        var foo = wrapper.innerText.trim();
        console.log(`...${foo}`);
        var foundNode = undefined;
        // Example usage: Process all Text nodes on the page
        walkTheDOM(document.body, function (node) {
            if (node /*&& /*node.data /*node.nodeType === 3*/
            ) { // Is it a Text node?
                var text = node.innerText;
                // node.data.trim();
                // console.log(text);
                if (text && text.length > 0) { // console.log(foo);
                    if (text === foo) {
                        console.log(text);
                        foundNode = node;
                    }
                }
            }
        });
        var myHilitor = new Hilitor("body"); // id of the element to parse
        console.log(`searchWord=${searchWord}`);
        myHilitor.apply(searchWord);
        if (foundNode) {
            foundNode.scrollIntoView();
        }

    };
</script>

</html>